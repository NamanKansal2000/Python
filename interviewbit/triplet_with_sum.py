class Solution:
    def solve(self, A):
        A = map(float, A)
        buckets = [[], [], []]
        for i in A:
            if i <= 2/3:
                buckets[0].append(i)
            elif i <= 1:
                buckets[1].append(i)
            else:
                buckets[2].append(i)

        def get(index):
            mx1, mx2, mx3 = -10, -10, -10
            min1, min2, min3 = 3, 3, 3
            for i in buckets[index]:
                if i > mx1:
                    mx1, mx2, mx3 = i, mx2, mx3
                elif i > mx2:
                    mx1, mx2, mx3 = mx1, i, mx3
                elif i > mx3:
                    mx1, mx2, mx3 = mx1, mx2, i
                if i < min1:
                    min1, min2, min3 = i, min2, min3
                if i < min2:
                    min1, min2, min3 = min1, i, min3
                if i < min3:
                    min1, min2, min3 = min1, i, min3
            return [mx1, mx2, mx3, min1, min2, min3]

        a = get(0)
        b = get(1)
        c = get(2)
        ls = []
        fc = a[0] + a[1] + a[2]  # all less than 2/3 and max of 2/3
        ls.append(fc)
        fc = a[3] + a[4] + c[3]  # two min 2/3 and 1 greater than 1
        ls.append(fc)
        fc = a[3] + b[3] + b[4]
        ls.append(fc)
        fc = a[3] + b[3] + c[3]
        ls.append(fc)
        fc = b[0] + a[3] + a[4]
        ls.append(fc)
        if a[0] != a[3]:
            fc = b[0] + a[0] + a[3]
            ls.append(fc)
            fc = b[3] + a[0] + a[3]
            ls.append(fc)
        fc = b[3] + a[0] + a[1]
        ls.append(fc)
        for fc in ls:
            if fc > 1 and fc < 2:
                return 1
        return 0


object = Solution()
print(object.solve([0.18167589452062305, 1.4201152653941116, 2.7742876682600013, 1.8895334263380559, 0.14306904314815494, 0.2327090576506522, 2.0090162259306563, 2.233244771526122, 1.4366959263158536, 0.8680989880612818, 0.5438711761072731, 2.6792628596440844, 0.5013626358641587, 0.646545104396209, 0.3230166974774341, 1.9783634458830133, 1.909401846538587, 2.1466046364056988, 0.30074733884227467, 1.8233733413678608, 1.913631285816936, 1.0630223969070571, 0.3002251342224369, 1.7718098106345734, 1.4245772745377283, 1.9868733686088866, 2.5343886465987358, 0.7062944430029839, 2.373618547889282, 2.3516303426511227, 2.4592163924244925, 0.07306739480008861, 1.9469278004088673, 2.6310115225196298, 1.0168890913105466, 0.33308113699597286, 0.4031469284084971, 1.2272053126897462, 1.549596631158964, 0.4248917842568347, 0.374645547249167, 0.4051192316894986, 2.304324771895788, 0.2949579442717756, 2.4160397151074386, 1.2724184298941976, 2.375526759448066, 1.1802242078002592, 0.6343807922666199, 0.5648005126699439,
                    2.1486004138682455, 0.11933654606010535, 2.531019917421923, 2.6469515473745853, 2.8123537745394502, 1.763628919688971, 2.83867014159705, 1.3641690373132325, 2.922246786745337, 2.642816704411116, 0.08417120330574857, 1.775479727187677, 0.22733871804265993, 0.3620668858079876, 0.07813987829855074, 2.240752597063889, 1.6515147664515815, 2.883505481822545, 2.4755354571169343, 2.268194447008073, 1.4420749758672322, 0.6392207333464236, 2.1070043134561764, 0.6811842762546219, 1.1661518359854908, 0.7527585150646604, 0.09922593331065932, 1.871823921266548, 1.0125426210381416, 1.3504108965314643, 0.2313695807120819, 2.8988676039744723, 0.4241610040882472, 2.7780981478553644, 0.2540682070057104, 0.7194620707816539, 0.41947976945164056, 2.6486693262440997, 2.3997993321421323, 0.18258660294780593, 1.0324750859976477, 1.8111415327669471, 0.9433697997828296, 2.698723596583627, 0.05924782497589165, 1.66367800223136, 0.3563646705525728, 1.7440616447099329, 2.2792212232152105, 2.399724144155085]))
